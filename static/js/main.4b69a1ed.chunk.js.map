{"version":3,"sources":["types/Filter.ts","components/Header/Header.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/PageNavLink/PageNavLink.tsx","components/Footer/Footer.tsx","App.tsx","UseLocalStorage.tsx","helpers.ts","index.tsx"],"names":["Filter","Header","handleAddTodo","useState","query","setQuery","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","TodoInfo","todo","deleteTodo","updateTodo","id","title","completed","isEditing","setIsEditing","inputValue","setInputValue","inputEl","useRef","useEffect","current","focus","changeTitleBlur","classNames","editing","onDoubleClick","checked","onClick","ref","onBlur","onKeyUp","key","TodoList","todos","map","PageNavLink","text","to","isActive","selected","Footer","clearCompleted","todosLeft","filter","todoLeft","length","isVisibleButton","some","App","initialValue","storedValue","localStorage","getItem","JSON","parse","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","useParams","isChecked","setIsChecked","visibleTodos","returnArr","ACTIVE","COMPLETED","getFilteredTodos","trim","newTodo","Date","isAllCompleted","every","updatedTodos","toggleAll","htmlFor","updatedTodo","ReactDOM","render","index","element","path","document","getElementById"],"mappings":"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","file":"static/js/main.4b69a1ed.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\n\ntype Props = {\n  handleAddTodo: (title:string) => void;\n};\n\nexport const Header: React.FC<Props> = ({ handleAddTodo }) => {\n  const [query, setQuery] = useState('');\n  const handleInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!query) {\n      return;\n    }\n\n    handleAddTodo(query);\n    setQuery('');\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          data-cy=\"createTodo\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={query}\n          onChange={handleInput}\n        />\n      </form>\n    </header>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, {\n  ChangeEvent,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  deleteTodo: (id:number) => void;\n  updateTodo: (updatedTodo: Todo) => void;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n  deleteTodo,\n  updateTodo,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(title);\n  const inputEl = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputEl.current) {\n      inputEl.current.focus();\n    }\n  }, [isEditing]);\n\n  const handleTodoDestroy = () => {\n    deleteTodo(id);\n  };\n\n  const handleCompletedTodo = () => {\n    updateTodo({ ...todo, completed: !completed });\n  };\n\n  const handleTitle = (e:ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const changeTitleBlur = () => {\n    setIsEditing(false);\n    if (inputValue === title) {\n      return;\n    }\n\n    if (inputValue) {\n      updateTodo({ ...todo, title: inputValue });\n    } else {\n      deleteTodo(id);\n    }\n  };\n\n  const handleTodoEdit = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      changeTitleBlur();\n    }\n\n    if (e.key === 'Escape') {\n      setInputValue(title);\n      setIsEditing(false);\n    }\n  };\n\n  const handleEditingInputOpen = () => {\n    setIsEditing(true);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing: isEditing,\n      })}\n    >\n      <div\n        className=\"view\"\n        onDoubleClick={handleEditingInputOpen}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={completed}\n          onChange={handleCompletedTodo}\n        />\n        <label>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          aria-label=\"destroy\"\n          onClick={handleTodoDestroy}\n        />\n      </div>\n      <input\n        ref={inputEl}\n        type=\"text\"\n        className=\"edit\"\n        onChange={handleTitle}\n        onBlur={changeTitleBlur}\n        onKeyUp={handleTodoEdit}\n        value={inputValue}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n  deleteTodo: (id:number) => void;\n  updateTodo: (updatedTodo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  deleteTodo,\n  updateTodo,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todosList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n          updateTodo={updateTodo}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype PageNavLinkProps = {\n  text: string,\n  to: string,\n};\n\nexport const PageNavLink: React.FC<PageNavLinkProps> = ({\n  text,\n  to,\n}) => (\n  <NavLink\n    to={to}\n    className={(({ isActive }) => classNames({ selected: isActive }))}\n  >\n    {text}\n  </NavLink>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { PageNavLink } from '../PageNavLink';\n\ntype Props = {\n  todos: Todo[];\n  clearCompleted: () => void;\n};\n\nexport const Footer:React.FC<Props> = ({\n  todos,\n  clearCompleted,\n}) => {\n  const todosLeft = todos.filter(todoLeft => !todoLeft.completed).length;\n  const isVisibleButton = todos.some(todo => todo.completed);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {todosLeft === 1 ? '1 item left' : `${todosLeft} items left`}\n      </span>\n\n      <ul className=\"filters\" data-cy=\"todosFilter\">\n        <li>\n          <PageNavLink\n            to=\"/\"\n            text=\"All\"\n          />\n        </li>\n\n        <li>\n          <PageNavLink\n            to=\"/active\"\n            text=\"Active\"\n          />\n        </li>\n\n        <li>\n          <PageNavLink\n            to=\"/completed\"\n            text=\"Completed\"\n          />\n        </li>\n      </ul>\n\n      {isVisibleButton && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\nimport { Todo } from './types/Todo';\nimport { useLocalStorage } from './UseLocalStorage';\nimport { getFilteredTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useLocalStorage<Todo[]>('todos', []);\n  const { filter = '' } = useParams();\n  const [isChecked, setIsChecked] = useState(false);\n  const visibleTodos = getFilteredTodos(todos, filter);\n\n  const handleAddTodo = (title: string) => {\n    if (title.trim() === '') {\n      return;\n    }\n\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  const deleteTodo = (id: number) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const updateTodo = (updatedTodo: Todo) => {\n    setTodos(todos.map(todo => (\n      todo.id === updatedTodo.id ? updatedTodo : todo)));\n  };\n\n  const toggleAll = () => {\n    const isAllCompleted = todos.every(todo => todo.completed);\n    const updatedTodos = todos.map(todo => ({\n      ...todo,\n      completed: !isAllCompleted,\n    }));\n\n    setTodos(updatedTodos);\n  };\n\n  const handleChecked = () => {\n    setIsChecked(!isChecked);\n    toggleAll();\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(({ completed }) => !completed));\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <Header handleAddTodo={handleAddTodo} />\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              data-cy=\"toggleAll\"\n              onChange={handleChecked}\n              checked={isChecked}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <TodoList\n              todos={visibleTodos}\n              deleteTodo={deleteTodo}\n              updateTodo={updateTodo}\n            />\n          </section>\n          <Footer\n            todos={todos}\n            clearCompleted={clearCompleted}\n          />\n\n        </>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\ntype ReturnValue<T> = [\n  T,\n  (newValue: T) => void,\n];\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): ReturnValue<T> {\n  const [value, setValue] = useState<T>(() => {\n    try {\n      const storedValue = localStorage.getItem(key);\n\n      if (storedValue) {\n        return JSON.parse(storedValue);\n      }\n\n      return initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const saveToStorage = (newValue: T) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveToStorage];\n}\n","import { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\n\nexport function getFilteredTodos(todos: Todo[], filter: string) {\n  const returnArr = [...todos];\n\n  switch (filter) {\n    case Filter.ACTIVE:\n      return returnArr.filter(todo => !todo.completed);\n    case Filter.COMPLETED:\n      return returnArr.filter(todo => todo.completed);\n    default:\n      return returnArr;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <Routes>\n      <Route>\n        <Route index element={<App />} />\n        <Route path=\":filter\" element={<App />} />\n      </Route>\n    </Routes>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}